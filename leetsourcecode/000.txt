 leetcode[130] Surrounded Regions
 void dfs(vector<vector<char>> &board, int i, int j)
    {
        int row = board.size(), col = board[0].size();
        if(i > 1 && board[i-1][j] == 'O')
        {
            board[i-1][j] = '#';
            dfs(board, i-1, j);
        }
        if(i < row-1 && board[i+1][j] == 'O')
        {
            board[i+1][j] = '#';
            dfs(board, i+1, j);
        }
        if(j > 1 && board[i][j-1] == 'O')
        {
            board[i][j-1] = '#';
            dfs(board, i, j-1);
        }
        if(j < col-1 && board[i][j+1] == 'O')
        {
            board[i][j+1] = '#';
            dfs(board, i, j+1);
        }
    }
    
    void solve(vector<vector<char> > &board)
    {
        if (board.size() < 3) return ;
        if (board[0].size() < 3) return ;
        int m = board.size(), n = board[0].size();
        for(int j=0;j<n;j++)
        {
            if (board[0][j] == 'O')
            {
                board[0][j] = '#';
                dfs(board,0,j);
            }
            if (board[m-1][j] == 'O')
            {
                board[m-1][j] = '#';
                dfs(board,m-1,j);
            }
        }
        for(int i=1;i<m-1;i++)
        {
            if (board[i][0] == 'O')
            {
                board[i][0] = '#';
                dfs(board,i,0);
            }
            if (board[i][n-1] == 'O')
            {
                board[i][n-1] = '#';
                dfs(board,i,n-1);
            }
        }
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
                if(board[i][j]=='O') board[i][j]='X';
                else if(board[i][j]=='#') board[i][j]='O';
            } 
    }