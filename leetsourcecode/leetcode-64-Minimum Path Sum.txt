/*leetcode-64-Minimum Path Sum
	Given a m x n grid filled with non-negative numbers, find a path from top left 
	to bottom right which minimizes the sum of all numbers along its path.
	Note: You can only move either down or right at any point in time.*/
	int minPathSum(vector<vector<int>>& grid)
	{
		if (grid.empty())return 0;
		int row = grid.size();
		int col = grid[0].size();
		vector<vector<int>>pathSum(row,vector<int>(col));//其实可以不必申请空间 直接使用grid就行
		pathSum[0][0] = grid[0][0];
		for (int i = 1; i < row;i++)
		{
			pathSum[i][0] = pathSum[i - 1][0] + grid[i][0];
		}
		for (int i = 1; i < col; i++)
		{
			pathSum[0][i] = pathSum[0][i - 1] + grid[0][i];
		}
		for (int i = 1; i < row;i++)
		{
			for (int j = 1; j < col;j++)
			{
				pathSum[i][j] = grid[i][j] + min(pathSum[i-1][j], pathSum[i][j-1]);
			}
		}
		return pathSum[row-1][col-1];
	}