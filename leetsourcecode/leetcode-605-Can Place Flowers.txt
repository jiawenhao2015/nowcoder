Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: True
 

Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: False
 

Note:

The input array won't violate no-adjacent-flowers rule.
The input array size is in the range of [1, 20000].
n is a non-negative integer which won't exceed the input array size.
思路：

看是否有连续三个0,注意最左边边界和最右边边界。

复制代码
bool canPlaceFlowers(vector<int>& flowerbed, int n) 
{
  int len = flowerbed.size();
  if(len==1 && flowerbed[0]==0 && n<=1)return true;  

  int can =0;
  for(int i=0;i<len;i++)
  {
     if(flowerbed[i]==0 && i-1>=0 && i+1<len && flowerbed[i-1]==0&& flowerbed[i+1]==0) 
     {
       can++;
       flowerbed[i]=1;
     }
     if(i==0&& flowerbed[0] == 0 && flowerbed[1]==0)
     {
       can++;
       flowerbed[0]=1;
    }
    if(i==len-3&& flowerbed[len-2] == 0 && flowerbed[len-1]==0)
     {
       can++;
       flowerbed[len-1]=1;
    }
  } 
  if(can>=n)return true;
  return false;
}
