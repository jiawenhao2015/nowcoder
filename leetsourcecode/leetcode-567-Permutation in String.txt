/*leetcode-567-Permutation in String
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1.
 In other words, one of the first string's permutations is the substring of the second string.
Example 1:
Input:s1 = "ab" s2 = "eidbaooo"
Output:True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False
Note:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].*/
//首先s1全排列，每一个全排列 查看是否是s2的子串
bool checkInclusion(string s1, string s2)
{
    if(s1.size()>s2.size())return false;
    char* s1char = new char(s1.size()+1);
    s1.copy(s1char,s1.size(),0);
    char* s1char2= new char(s1.size()+1);
    s1.copy(s1char2,s1.size(),0);
    do
    {
        if(s2.find(s1char) != string::npos) return true;
    }while(next_permutation(s1char,s1char+strlen(s1char)));
    do
    {
        if(s2.find(s1char2) != string::npos) return true;
    }while(prev_permutation(s1char2,s1char2+strlen(s1char2)));
return false;
}
bool checkInclusion2(string s1, string s2)
{
    int m = s1.length(),n = s2.length();
    if(m>n)return false;
    vector<int>maps1(26),maps2(26);
    for(int i=0;i<m;i++)
    {
        maps1[s1[i] - 'a'] ++;
        maps2[s2[i] - 'a'] ++;
    }
    if(maps1 == maps2) return true; //统计前m个字符是否符合条件
    for(int i = 0;i+m<n;i++)
    {
         maps2[s2[i] - 'a'] --;
         maps2[s2[i+m] - 'a'] ++;
         if(maps1 == maps2) return true;
    }
    return false;
}

