public class Solution {
    public String removeKdigits(String num, int k) {
        int len = num.length();
        //corner case
        if(k==len)        
            return "0";
            
        Stack<Character> stack = new Stack<>();
        int i =0;
        while(i<num.length()){
            //whenever meet a digit which is less than the previous digit, discard the previous one
            while(k>0 && !stack.isEmpty() && stack.peek()>num.charAt(i)){
                stack.pop();
                k--;
            }
            stack.push(num.charAt(i));
            i++;
        }
        
        // corner case like "1111"
        while(k>0){
            stack.pop();
            k--;            
        }
        
        //construct the number from the stack
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty())
            sb.append(stack.pop());
        sb.reverse();
        
        //remove all the 0 at the head
        while(sb.length()>1 && sb.charAt(0)=='0')
            sb.deleteCharAt(0);
        return sb.toString();
    }
}

string removeKdigits(string num, int k) 
 { 
   if(k==0)
   {
     if(num == ""||num.length() == 0) return "0";
    // if( num[0]!='0')return num;
     int i =0;
     while(num[i]=='0')i++;
     if(i >= num.length())return "0";
     return num.substr(i);
  }
  int index =0;
  while(index+1<num.length() && num[index]<=num[index+1] )index++;//找到最大的
  string left = num.substr(0,index);
  string right ;
  if(index+1<num.length()) right = num.substr(index+1);
  else right ="";
  return removeKdigits(left+right,k-1);
