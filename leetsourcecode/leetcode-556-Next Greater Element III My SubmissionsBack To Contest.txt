/*leetcode-556-Next Greater Element III My SubmissionsBack To Contest
User Accepted: 363
User Tried: 574
Total Accepted: 368
Total Submissions: 1430
Difficulty: Medium
Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in
the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.
Example 1:
Input: 12
Output: 21
Example 2:
Input: 21
Output: -1
思路：
将n分解为个位数字，放入vector中，然后排序

Input:
101
Output:
-1
Expected:
110
*/
//大牛写的
 int nextGreaterElement(int n) {
        char buf[80];
        sprintf(buf, "%d", n);
        string s = buf;
        puts(s.data());
        sort(s.begin(), s.end());
        long long ans = INT_MAX + 1LL;
        do {
            long long tmp = atoll(s.c_str());
            if (tmp > n) {
                ans = min(ans, tmp);
            }
        } while (next_permutation(s.begin(), s.end()));
        return ans <= INT_MAX ? ans : -1;
    }
int nextGreaterElement(int n)
{
    vector<int>digit;
    vector<int>origin;
    while(n)
    {
        digit.push_back(n%10);
        n/=10;
    }
    origin = digit;//保存原来的
    sort(digit.begin(),digit.end());

    int i =0;

    for(;i<digit.size();i++)
    {
       if(digit[i] >=origin[origin.size()-1])//原来的最高位
       {
           break;
       }
    }
      if(i>=digit.size()) return -1;//说明原来的最高位已经是最大 digit 里没有更大的了
    int zuigaoweiIndex = i;
    int result = digit[i];
    for(i =0;i<digit.size();i++)
    {
        if(i != zuigaoweiIndex)
        {
            result = result*10 + digit[i];
        }
    }
    return result;
}
