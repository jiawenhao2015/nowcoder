*leetcode-127-Word Ladder
Given two words (beginWord and endWord), and a dictionary's word list,
find the length of shortest transformation sequence from beginWord to endWord, such that:
Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.*/
 int ladderLength(string beginWord, string endWord, vector<string>& wordList)
 {
     bool flag = false;
       for(int j =0;j<wordList.size();j++)//保证endWord出现在wordList里
     {
         if(wordList[j] == endWord) flag = true;
     }
     if(!flag) return 0;
     queue<string> que;
     que.push(beginWord);
     int length = beginWord.size();
     int count = 1, level = 0;
     string str;
     while(!que.empty())
     {
         str = que.front();
         que.pop();
         for(int i = 0;i<length;i++)//每一个字符str[i]挨个替换
         {
             for(char ch = 'a';ch<='z';ch++)
             {
                 if(ch == str[i]) continue;//相同
                 swap(str[i],ch);
                 if(str ==endWord) return level+2;
                 for(int j =0;j<wordList.size();j++)
                 {
                     if(wordList[j] == str)
                     {
                         que.push(str);
                         wordList.erase(wordList.begin()+j);
                         break;
                     }
                 }
                  swap(str[i],ch);
             }
         }
            count--;
         if(count == 0)
         {
             count = que.size();
             level++;
         }
     }
    return 0;
}
