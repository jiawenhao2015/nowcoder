/*leetcode-72-Edit Distance
	Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)
	You have the following 3 operations permitted on a word:
	a) Insert a character
	b) Delete a character
	c) Replace a character*/
	int minDistance(string word1, string word2)
	{
		int a = word1.length(), b = word2.length();
		vector<vector<int>> result(a + 1, vector<int>(b + 1, 0));
		for (int i = 1; i <= a; i++)
			result[i][0] = i;
		for (int j = 1; j <= b; j++)
			result[0][j] = j;
		for (int i = 1; i <= a;i++)
		{
			for (int j = 1; j <= b; j++)
			{
				if (word1[i-1] == word2[j-1])
				{
					result[i][j] = result[i-1][j-1];
				}
				else
				{
					result[i][j] = min(result[i - 1][j - 1] + 1, min(result[i][j - 1]+1, result[i - 1][j]+1));
				}
			}
		}
		return result[a][b];
	}