int openLock(vector<string>& deadends, string target)
 {
	int ret = 0;
	unordered_set<string> dead(deadends.begin(),deadends.end());
	unordered_set<string> visited;
	queue<string>que;
	if(dead.find("0000")!=dead.end()) return -1;
	visited.insert("0000");
	que.push("0000");
	
	while(!que.empty())
	{
		int sz = que.size();
		for(int i=0;i<sz;i++)
		{
			string temp = que.front();que.pop();
			vector<string>next = getNext(temp);
			for(auto n : next)
			{
				if(n == target)return ret+1;
				if(visited.find(n)!=visited.end()) continue;
				if(dead.find(n)==dead.end())
				{
					que.push(n);
					visited.insert(n);
				}
			}
		}
		ret++;
	}
	return -1;        
  }
  
  vector<string> getNext(string str)
  {
	vector<string> next;
	for(int i=0;i<4;i++)
	{
		string tmp = str;
		tmp[i] = (str[i]+1-'0')%10+'0';
		next.push_back(tmp);
		tmp[i] = (str[i]+1-'0')%10+'0';
		next.push_back(tmp);
	}	
	return next;
  }