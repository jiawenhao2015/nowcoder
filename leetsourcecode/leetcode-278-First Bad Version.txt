You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

思路：

二分查找。

但是有要注意的地方就是：middle = (low + high) / 2; 这样会导致超时   而middle = low + (high -low)/2;却没有问题。

'left + right' may cause the Integer Overflow, meaning that left+right > 2147483647。

复制代码
bool isBadVersion(int version);
 int firstBadVersion(int n)
 {
   int low  =1 , high = n ,middle;
   while(low<high)
   {
     //middle = (low + high) / 2;//超时
     middle = low + (high -low)/2;
     if(!isBadVersion(middle)) low = middle +1;
     else high  = middle;
   }
   return low;
 }
复制代码
参考：

https://discuss.leetcode.com/topic/23597/short-c-answer-and-minimize-api-calls

https://discuss.leetcode.com/topic/23617/what-s-the-difference-between-left-right-2-and-left-right-left-2/2
