/*leetcode-39-Combination Sum
     Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
     The same repeated number may be chosen from C unlimited number of times.
     Note:
     All numbers (including target) will be positive integers.
     The solution set must not contain duplicate combinations.
     For example, given candidate set [2, 3, 6, 7] and target 7,
     A solution set is:
     [
     [7],
     [2, 2, 3]
     ]*/
     void combinationSum(vector<vector<int>>&ret, vector<int>& temp, vector<int>& candidates, int target,int begin)
     {
         if (target==0)
         {
             ret.push_back(temp);
             return;
         }
         for (int i = begin; i < candidates.size() && candidates[i]<=target;i++)
         {
             temp.push_back(candidates[i]);
             combinationSum(ret, temp, candidates, target - candidates[i],i);
             temp.pop_back();
         }
     }
     vector<vector<int>> combinationSum(vector<int>& candidates, int target)
     {
         vector<vector<int>>ret;
         vector<int>temp;
         sort(candidates.begin(), candidates.end());
         combinationSum(ret, temp, candidates, target,0);
         return ret;
     }