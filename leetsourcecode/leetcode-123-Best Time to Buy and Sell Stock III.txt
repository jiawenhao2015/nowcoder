/*leetcode-123-Best Time to Buy and Sell Stock III
	Say you have an array for which the ith element is the price of a given stock on day i.
	Design an algorithm to find the maximum profit. You may complete at most two transactions.
	Note:
	You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).*/
	int maxProfitcore(vector<int>& prices,int start,int end)
	{//从start 到 end期间 最大profit
		if (start == end|| prices.size()==0) return 0;
		int tempProfit = 0, maxProfit = 0;
		for (int i = start+1; i <=end; i++)
		{
			tempProfit += prices[i] - prices[i - 1];
			tempProfit = max(0, tempProfit);
			maxProfit = max(maxProfit, tempProfit);
		}
		return maxProfit;
	}//超时
	int maxProfit3(vector<int>& prices)
	{
		int profit = 0;
		for (int i = 1; i < prices.size();i++)
		{
			int pro1 = maxProfitcore(prices, 0, i);
			int pro2 = maxProfitcore(prices, i, prices.size()-1);
			profit = max(profit,pro1+pro2);
		}
		return profit;
	}